/**
 * @author finalObject
 * 	   http://www.finalobject.cn
 *	   i@finalobject.cn
 *	   https://github.com/finalobject
 * @date   Feb 23,2017 17:38:12
 * @version 1.0
 */

let maxNum = 100 //constant
var index = 0 //variable

var website = "finalobject.cn"
var website:String = "finalobject.cn"//强类型语言，但是不强制要求申明

Int,UInt,UInt8,,,//Unsigned Integer
// 使用0b,0o,0x
var decimalInt: Int = 17
var binaryInt: Int  = 0b10001
var octalInt: Int   = 0o21
var hexInt:Int      = 0x11
// 使用_标示数字位,数字位间隔任意
let x = 1_000_000

Float,Double,CGFloat
var a:Float =1.25e10
var b:Float =1_000.000_000_1

//不同类型之间运算不存在隐式自动的类型转换
//必须强制显式的类型转换
Float(amInt)

//UIColor
UIColor(red:1,green:1,blue:0,alpha:0.5)//其中的数字即必须是CGFloat类型

var isTrue:Bool = true
var isFalse:Bool = false

//condition 不一定需要用小括号包裹
//大括号不可省略
if condition{
   statement;
}else{
   statement;
}

//Arrays
var arr:Int[]=[1,2,3]
arr[0]=2


//Cells
var a = 2
var b = "Hello"
var c = true
var arr1=(a,b,c)
var arr2:(Int,String,Bool)=(a,b,c)

var (a1,a2,_)=arr2//取出的是值而不是指针,_忽略值
arr2.0//.运算符可以取出对应位置的指针

var arr3=(x:2,y:3)//直接指定元素的名字
var arr3:(x:Int,y:Int)=(2,3)
arr3.x

//变量名字可以是Unicode

print(x,y,z,separator:",",terminator:"\n")//默认是空格和会车
print("\(x)+\(y)=\(result)")//反斜杠括号表示引用

//赋值运算符，会返回值，和C一样
var a=2
//数学运算符
//(+a)(-a)也是运算符，interesting!
//比较预算符，不等于也是!=
//比较引用内容，===,!==
//逻辑运算符，!,&&,||,会短路

//和其他语言一样
question?answer1:answer2

//区间运算符
//闭区间运算符 a...b
//开区间运算符,前闭后开 a..<b
//返回的是一个数组吧
//index不需要申明，是常量
for index in 1...10{
    print(index)
}

//for循环被移除了
//while循环
while condition{
      statement;
}
//do-while循环
repeat{
	statement;
}while condition
//break&continue也一样

//switch 中不用加break了
//case 后面可以加入数组，区间
//多种情况的时候不要加小括号，小括号是cell！
//有好多有意思的写法，可以去看看老师的文档
//fallthrough 主动进入下一个case
switch value{
case "A","a":
     statement;
case "B","b":
     statement;
default:
     ()//表示什么都不做，和;类似
     statement;
}

//给外层循环命名，在内循环中直接跳出外层循环
//有争议的一个特性
outerWhile:for m in 1...300{
    for n in 1...300{
        if condition{break outerWhile}
    }
}

//如果age在[1,9]范围内,并且age大于等于2
//where挺有意思的,可以用在case或者if里面
if case 1...9 = age where age>=2{
	statement
}

//function
func getAns(number1:Int,number2:Int){
	return number1+number2
}

var str="Hello"
for c in str.characters{//characters返回的不是字符数组
	print(c)
	//c就是好久不见的Character
}
var char:Character="!"
str.append(char)//字符串和字符连接
//Unicode编码
var coolGuy:Character="\u{1F60E}"

//String的索引需要使用另一种数据类型Index，而不是Int
let index = str.startIndex
let char1 = str[index]
let char2 = str[index.advancedBy(5)]//第一个往后移6
index.predecessor()//前一个Index
index.successor()//后一个Index
str.endIndex//是最后一个字符后面一个位置，可以理解成字符串长度
str[str.startIndex..<str.endIndex]//这样获取整个字符串，自行感受
let range = index1..<index2
str.replaceRange(range,with:"ANOTHER")//指定range内的内容替换成ANNOTHER
str.appendContentsOf(anotherStr)
str.insert("?",atIndex:str.endIndex)//endIndex是最后一个的后一位置，吧?填上去
str.removeAtIndex(idnex)
str.removeRange()
str.containsString()
str.hasPrefix(str2)//看str是否以str2开头
str.hasSuffix(str2)//结尾
//NNString,相关函数使用的index用的都是Int，比较习惯
var str = NSString(format:"%2.5f\n",1.0/3.0)
var str2:String = str as String

let s4 = "   --a--   " as NSString
s4.stringByTrimmingCharactersInSet(NSCharacterSet(chararcterInString:" -"))
//这个可以取出字符串中的空格和横线，String里面没有这种方法

nil//没有就是没有哈哈
var errorCode:Int?=404//加问好之后变成可选型，可以变成nil
errorCode=nil
//nil不能单独呈现，必须和其他类型形成可选型
errorCode!//强制转换成那个基础类型，忽略nil的可能，最好用之前加判断

if let a=errorCode{
   //如果不是nill进这里，a直接就是可选型的基础类型，这样的方式好一点
}else{
	
}
errorCode?.uppercaseString//尝试当成String用，失败就什么都不敢
a=erroCode??"NoError"//尝试赋值，是nil的话就赋值成NoError


//2019.3.29
var a1:[Int]=[]
var a2 = [Int]()

//Dictionary
var dict:[String:String]= ["hello":"nihao","bye":"再见"]
var dict:Dictionary<String,String> = [:]

dict["hello"] = "你好"
dict.updateValue("nihao",forKey:"hello")

//set
var skills:Set<String> = ["swift","OC"] 
var set1:Set<Int> = []
var set2 = Set<Double>()

var set3 = Set(["1","2"])

//function
//to代表外部调用的时候使用的名字，name是内部使用的名字，这样很棒！
//如果不给参数，默认huxiaobo
func sayHello(to name:String = "huxiaobo") -> String{
  return "hello \(name)"
}
//这样调用，第二个外部名也不用加
func add(num1 : Int , _ num2 : Int){
  
}
sayHello(to:"Rin")

func sayHello() -> Void{
  
}
//变长度的参数，这个参数就当作数组处理
func mean(numbers : Double ...) -> Double{
  var sum:Double = 0
  for number in numbers{
    sum += number
  }
  return sum/Double(numbers.count)
}
//改变传入值，数组传入，也需要这样的操作，都是按值传入的
func swap(inout a: Int,inout _ b: Int){
  (a,b)=(b,a)
}
var a:Int = 1
var b:Int = 2
swap(&a,&b)

//函数赋值，太强了
func add (a:Int,_ b:Int)->Int{
  return a+b
}
let anotherAdd : (Int,Int)->Int = add
anotherAdd(3,4)

//系统提供的一些高阶函数
map(Int->Int)
filter(Int -> Bool)
reduce 

//闭包 
{
  (a:Int,b:Int)->Bool in
    return a>b
}
//如果函数已经声明过了，可以直接这么写
{ a,b in return a>b}
//如果名字都不想取，直接这么写
{ $0 > $1 }

//枚举
enum Month{
  case January
  case February
  case March
  ...
}
enum Season{
  case Spring, Summer, Autumn, Winter
}
//枚举和其他类型建立关系
enum Season:Int{
  case Spring = 1
  case Summer = 2
  case Autumn = 3
  case Winter = 4
}
let curMonth = Month.March
let curMonth:Month = .March





